#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e


info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}



# 判断文件是否存在
function is_exist_file() {
    filename=$1
    if [ -f $filename ]; then
        echo 1
    else
        echo 0
    fi
}

# 判断目录是否存在
function is_exist_dir() {
    dir=$1
    if [ -d $dir ]; then
        echo 1
    else
        echo 0
    fi
}



# 拷贝文件
function copy_files() {
    rm -rf ~/.vimrc
    ln -s ${PWD}/.vimrc ~

    rm -rf ~/.vimrc.custom.plugins
    cp ${PWD}/.vimrc.custom.plugins ~

    rm -rf ~/.vimrc.custom.config
    cp ${PWD}/.vimrc.custom.config ~

    rm -rf ~/.ycm_extra_conf.py
    ln -s ${PWD}/.ycm_extra_conf.py ~

    mkdir ~/.vim
    rm -rf ~/.vim/colors
    ln -s ${PWD}/colors ~/.vim

    rm -rf ~/.vim/ftplugin
    ln -s ${PWD}/ftplugin ~/.vim

    rm -rf ~/.vim/autoload
    ln -s ${PWD}/autoload ~/.vim
}

# 安装mac平台字体
function install_fonts_on_mac()
{
    rm -rf ~/Library/Fonts/Droid\ Sans\ Mono\ Nerd\ Font\ Complete.otf
    cp ./fonts/Droid\ Sans\ Mono\ Nerd\ Font\ Complete.otf ~/Library/Fonts
}

# 打印logo
function print_logo()
{
    color="$(tput setaf 6)"
    normal="$(tput sgr0)"
    printf "${color}"
    echo "----------------------------------------------------------------------"
    echo '        __                __           '
    echo '__   __/_/___ ___  ____  / /_  _______ '
    echo '\ \ / / / __ `__ \/ __ \/ / / / / ___/ '
    echo ' \ V / / / / / / / /_/ / / /_/ (__  )  '
    echo '  \_/_/_/ /_/ /_/ ,___/_/\____/____/   '
    echo '               /_/                     ...is now installed!'
    echo ''
    echo ''
    echo 'Just enjoy it!'
    echo 'p.s. Follow me at https://github.com/qingbol/dotfiles'
    echo ''
    printf "${normal}"
}

link_file () {
    local src=$1 dst=$2
    local overwrite= backup= skip=
    local action=

    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then
        is_all=$([ "$overwrite_all" == "false" ] && \
                [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ])
        if ${is_all}; then
            local currentSrc="$(readlink $dst)"
            if [ "$currentSrc" == "$src" ]; then
                skip=true;
            else
                str_a="File already exists: $dst ($(basename "$src")), what do you want to do?\n"
                str_b="[s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                user "$str_a""$str_b"
                read -n 1 action
                case "$action" in
                    o ) overwrite=true;;
                    O ) overwrite_all=true;;
                    b ) backup=true;;
                    B ) backup_all=true;;
                    s ) skip=true;;
                    S ) skip_all=true;;
                    * ) ;;
                esac
            fi
        fi
        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}

        if [ "$overwrite" == "true" ]; then
            rm -rf "$dst"
            success "removed $dst"
        fi
        if [ "$backup" == "true" ]; then
            mv "$dst" "${dst}.backup"
            success "moved $dst to ${dst}.backup"
        fi
        if [ "$skip" == "true" ]; then
            success "skipped $src"
        fi
    fi
    # "false" or empty
    if [ "$skip" != "true" ]; then
        ln -s "$1" "$2"
        success "linked $1 to $2"
    fi
}

install_dotfiles () {
    echo "----------------------------------------------------------------------"
    echo "Entering: install_dotfiles......"
    info 'installing dotfiles'

    local overwrite_all=false backup_all=false skip_all=false

    local file_lst=$(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' \
          -not \( -path '*.git*' -o -path '*tmp*' \) )
    # for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not \( -path '*.git*' -o -path '*tmp*' \) )
    # for src in $(find -H "$DOTFILES_ROOT" -name '*.symlink' -type d \( -path '*.git*' -o -path '*tmp*' \) -prune -o -print )
    for src in ${file_lst}; do
      echo "src: "$src
      dst="$HOME/.$(basename "${src%.*}")"
      echo "dst: "$dst
      link_file "$src" "$dst"
    done
    echo "Exiting: install_dotfiles......"
}

#Install oh-my-zsh
install_ohmyzsh_on_mac () {
    echo "----------------------------------------------------------------------"
    echo "Entering: install_ohmyzsh_on_mac......"
    if [ ! -d ~/.oh-my-zsh ]; then
        info '  Installing oh-my-zsh for you'
        curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
    else
        echo "oh-my-zsh already installed......"
    fi
    echo "Exiting: install_ohmyzsh_on_mac......"
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}

install_git () {
    echo "entering: install_git......"
    if test ! $(which git); then 
        echo "Installing git for you......"
        brew install git
    else
        echo "git already installed......"
    fi
}

install_homebrew () {
    echo "entering: install_homebrew......"
    if test ! $(which brew); then
        echo "Installing Homebrew for you..."
        # Install the correct homebrew for each OS type
        if test "$(uname)" = "Darwin"; then
            ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        elif test "$(expr substr $(uname -s) 1 5)" = "Linux"; then
            ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/linuxbrew/go/install)"
        fi
    else
        echo "Homebrew already installed......"
    fi
}

install_xcode_clt () {
    if xcode-select --install 2>&1 | grep installed; then
        echo xcode CLT already installed;
    else
        echo xcode CLT installing;
    fi

}

# Install prerequisite software for vimplus
function install_prerequisite_software_on_mac() {
    echo "----------------------------------------------------------------------"
    echo "Entering: install_prerequisite_software_on_mac..."
    ## Install prerequisite software for vimplus
    ### To install homebrew, we need to nstall Command Line Tools (CLT) for Xcode
    install_xcode_clt
    install_homebrew 
    # brew install git
    install_git
    # setup_gitconfig
    # brew install vim gcc cmake ctags-exuberant ack

    # macos1014=$(is_macos1014)
    # if [ $macos1014 == 1 ]; then
    #     open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg
    # fi
    echo "Exiting: install_prerequisite_software_on_mac..."
}

# The install workflow on mac
function installation_workflow_on_mac() {
    echo "**********************************************************************"
    echo "entering: installation_workflow_on_mac..."
    install_prerequisite_software_on_mac
    #--------start(install ohmyzsh)---------------------------------------------
    ##To install ohmyzsh, only curl is required
    install_ohmyzsh_on_mac
    #-------- end (install ohmyzsh)---------------------------------------------

    #--------start(install vimplus)---------------------------------------------
    # To install vimplus, it's required to install brew & git first
    # install_vimplus_on_mac
    #-------- end (install vimplus)---------------------------------------------

    install_dotfiles
    # backup_vimrc_and_vim
    # install_prepare_software_on_mac
    # copy_files
    # install_fonts_on_mac
    # install_ycm
    # install_vim_plugin
    # info "installing dependencies"

    # if source bin/dot | while read -r data; do info "$data"; done; then
    #   success "dependencies installed"
    # else
    #   fail "error installing dependencies"
    # fi
    print_logo
}

# retrieve the platform type(mac/linux)
function get_platform_type() {
    echo $(uname)
}

# obatin date
function get_datetime() {
    time=$(date "+%Y%m%d%H%M%S")
    echo $time
}

# obtain current time
function get_now_timestamp() {
    cur_sec_and_ns=`date '+%s-%N'`
    echo ${cur_sec_and_ns%-*}
}

# main funciton
function main() {
    echo ''
    begin=`get_now_timestamp`

    type=`get_platform_type`
    echo "Platform type: "${type}
    if [ ${type} == "Darwin" ]; then
        echo "entering macos system"
        installation_workflow_on_mac
    elif [ ${type} == "Linux" ]; then
        echo "linux"
        # install_vimplus_on_linux
    else
        echo "Not support platform type: "${type}
    fi

    end=`get_now_timestamp`
    # second=`expr ${end} - ${begin}`
    # min=`expr ${second} / 60`
    # echo "It takes "${min}" minutes."
    echo ''
    echo "All installed"
}

#entry  
main
